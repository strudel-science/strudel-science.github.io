{"version":3,"file":"component---src-components-layouts-page-layout-tsx-content-file-path-content-design-system-task-flows-overview-mdx-45518e846374635fb1a7.js","mappings":"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","sources":["webpack://strudel/./content/design-system/task-flows/overview.mdx","webpack://strudel/./src/components/layouts/PageLayout.tsx","webpack://strudel/./src/components/Hero.tsx","webpack://strudel/./src/components/TaskFlowCard.tsx","webpack://strudel/./src/hooks/useTaskFlow.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Stack} from '@mui/material';\nimport {Hero} from '/src/components/Hero';\nimport {PageContainer} from '/src/components/PageContainer';\nimport {TaskFlowCard} from '/src/components/TaskFlowCard';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(Hero, null, React.createElement(_components.p, null, \"STRUDEL Design System is framed and guided by Task Flows, which are a set of steps (represented by a series of screens) that help to accomplish a task and represent how a user progresses through a UI.\")), \"\\n\", React.createElement(PageContainer, null, React.createElement(_components.h2, null, \"Browse the Task Flows\"), React.createElement(Stack, {\n    spacing: 2\n  }, React.createElement(TaskFlowCard, {\n    name: \"Compare Data\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Contribute Data\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Explore Data\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Manage Account\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Monitor Activities\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Run Computation\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Run Interactive Computation\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Search Data Repositories\",\n    showDescription: true,\n    showTags: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Track State\",\n    showDescription: true,\n    showTags: true\n  }))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/strudel-web/strudel-web/content/design-system/task-flows/overview.mdx\";\nimport * as React from 'react';\nimport {Stack, Typography} from '@mui/material';\nimport BaseLayout from './BaseLayout';\nimport {PageHeader} from '../PageHeader';\nimport {StyledMarkdown} from '../StyledMarkdown';\nimport Seo from '../Seo';\nconst PageLayout = _ref => {\n  let {pageContext, children} = _ref;\n  return React.createElement(BaseLayout, {\n    hasSidebar: true\n  }, React.createElement(PageHeader, null, React.createElement(Stack, {\n    spacing: 2\n  }, React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    fontWeight: \"bold\"\n  }, pageContext.frontmatter.title), React.createElement(Typography, {\n    variant: \"h6\",\n    fontWeight: \"normal\"\n  }, pageContext.frontmatter.subtitle))), React.createElement(StyledMarkdown, null, children));\n};\nexport const Head = _ref2 => {\n  let {pageContext} = _ref2;\n  return React.createElement(Seo, {\n    title: pageContext.frontmatter.title\n  });\n};\nPageLayout\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageLayout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React, { PropsWithChildren } from 'react';\nimport { PageSection, PageSectionProps } from './PageSection';\nimport { Breakpoint } from '@mui/material';\n\ninterface HeroProps extends PropsWithChildren {\n  /** Optionally wrap the inner content in its own container and give it a max width. */\n  containerWidth?: false | Breakpoint | undefined;\n}\n\n/**\n * Full width purple page section for area towards the top of a page.\n */\nexport const Hero: React.FC<PageSectionProps> = ({\n  containerWidth = 'md',\n  sideRibbon,\n  sx,\n  children \n}) => {\n  return (\n    <PageSection\n      containerWidth={containerWidth}\n      sideRibbon={sideRibbon}\n      sx={{\n        backgroundColor: 'info.main',\n        color: 'white',\n        fontSize: '1.15em',\n        ...sx\n      }}\n    >\n      {children}\n    </PageSection>\n  );\n};","import React, { PropsWithChildren, ReactNode } from 'react';\nimport { Box, Chip, Stack, Typography } from '@mui/material';\nimport { Link } from 'gatsby';\nimport { useTaskFlow } from '../hooks/useTaskFlow';\nimport { FileNode } from 'gatsby-plugin-image/dist/src/components/hooks';\nimport { getImageFromFileNode } from '../utils/utils';\nimport { GatsbyImage } from 'gatsby-plugin-image';\n\ninterface TaskFlowCardProps {\n  /** Name of a task flow as specified in strudel-config.json */\n  name: string;\n  /** Optionally display the full task flow description in the card */\n  showDescription?: boolean;\n  /** Optionally display the task flow tags in the card */\n  showTags?: boolean;\n}\n\n/**\n * Generate a Task Flow card by supplying the name of the task flow.\n * The tagline, title, description, image, and link will be generated \n * automatically based on the data in the task flow's markdown frontmatter.\n */\nexport const TaskFlowCard: React.FC<TaskFlowCardProps> = ({ \n  name,\n  showDescription = false,\n  showTags = false\n}) => {\n  const taskFlow = useTaskFlow(name);\n\n  if (taskFlow) {\n    return (\n      <TaskFlowCardBase\n        title={taskFlow.name}\n        //tagline={taskFlow?.tagline}\n        description={showDescription ? taskFlow.intent : undefined}\n        path={taskFlow?.path}\n        tags={showTags ? taskFlow?.tags : undefined}\n        thumbnail={typeof taskFlow.iconImage !== 'string' ? taskFlow.iconImage : undefined}\n      />\n    );\n  } else {\n    console.log(`No task flow found named \"${name}\"`)\n  }\n}\n\ninterface TaskFlowCardBaseProps {\n  title: string;\n  tagline?: string;\n  description?: string;\n  path?: string;\n  tags?: string[];\n  /** \n   * This must be a FileNode returned from GraphQL for an image field.\n   * This is so its gatsbyImageData can be transformed to support <GatsbyImage>\n   */\n  thumbnail?: FileNode;\n  thumbnailComponent?: ReactNode;\n}\n\n/**\n * Base component for the Task Flow cards.\n * Renders the given title, tagline, description, and image in a card view.\n */\nexport const TaskFlowCardBase: React.FC<TaskFlowCardBaseProps> = ({\n  title,\n  tagline,\n  description,\n  path = '#',\n  tags,\n  thumbnail,\n  thumbnailComponent\n}) => {\n  const thumbnailImg = getImageFromFileNode(thumbnail);\n  return (\n    <Link\n      to={path}\n      style={{\n        color: 'inherit',\n        display: 'block',\n        position: 'relative',\n      }}\n    >\n      <Box\n        sx={{\n          backgroundColor: 'error.main',\n          height: '100%',\n          left: 0,\n          position: 'absolute',\n          top: 0,\n          width: '8px',\n          zIndex: 2,\n        }}\n      />\n      <Stack\n        direction=\"row\"\n        spacing={3}\n        sx={{\n          alignItems: 'center',\n          border: '2px dotted',\n          borderColor: 'error.main',\n          padding: 1,\n          paddingLeft: 2,\n          transition: '0.25s',\n          '&:hover': {\n            backgroundColor: 'neutral.main'\n          }\n        }}\n      >\n        <Box\n          sx={{\n            flexShrink: 0,\n            height: 110,\n            width: 110,\n          }}\n        >\n          {!thumbnailImg && thumbnailComponent}\n          {thumbnailImg && (\n            <GatsbyImage\n              image={thumbnailImg} \n              alt=\"Test\"\n            />\n          )}\n        </Box>\n        <Stack spacing={1}>\n          <Typography \n            variant=\"h6\" \n            component=\"p\" \n            fontWeight=\"bold\"\n          >\n            {title}\n          </Typography>\n          <Typography>\n            {description || tagline}\n          </Typography>\n          {tags && (\n            <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n              {tags.map((tag, i) => (\n                <Chip \n                  key={`${tag}-${i}`}\n                  label={tag}\n                  variant=\"outlined\"\n                />\n              ))}\n            </Stack>\n          )}\n        </Stack>\n      </Stack>\n    </Link>\n  );\n};","import { useStaticQuery, graphql } from \"gatsby\"\nimport { findPageByName } from \"../utils/utils\";\nimport { StrudelPage, TaskFlowFrontmatter } from \"../types/strudel-config\";\n\ninterface TaskFlowsResult {\n  configJson: {\n    pages: StrudelPage[]\n  },\n  allMdx: {\n    nodes: {\n      frontmatter: TaskFlowFrontmatter,\n      internal: {\n        contentFilePath: string;\n      }\n    }[]\n  }\n}\n\n/**\n * Get task flow metadata using the task flow's name in the config.\n * Combines fields from the task flow's object in strudel-config.json and \n * markdown frontmatter.\n */\nexport const useTaskFlow = (name: string) => {\n  const { configJson, allMdx } = useStaticQuery<TaskFlowsResult>(\n    graphql`\n      query {\n        configJson {\n          pages {\n            name\n            children {\n              name\n              children {\n                name\n                markdownId\n                path\n              }\n            }\n          }\n        }\n        allMdx {\n          nodes {\n            frontmatter {\n              id\n              title\n              tagline\n              tags\n              intent\n              intentDetails\n              iconImage {\n                childImageSharp {\n                  gatsbyImageData(width: 800)\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const taskFlowConfig = findPageByName(name, configJson.pages);\n  if (taskFlowConfig) {\n    const mdx = allMdx.nodes?.find((md) => md.frontmatter.id === taskFlowConfig.markdownId);\n    return {\n      ...taskFlowConfig,\n      ...mdx?.frontmatter\n    }\n  } else {\n    return;\n  }\n}"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","_provideComponents","components","React","Hero","PageContainer","Stack","spacing","TaskFlowCard","name","showDescription","showTags","wrapper","MDXLayout","PageLayout","_ref","pageContext","children","BaseLayout","hasSidebar","PageHeader","Typography","component","variant","fontWeight","frontmatter","title","subtitle","StyledMarkdown","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","containerWidth","sideRibbon","sx","PageSection","backgroundColor","color","fontSize","taskFlow","configJson","allMdx","useStaticQuery","taskFlowConfig","findPageByName","pages","mdx","nodes","_allMdx$nodes","find","md","id","markdownId","useTaskFlow","TaskFlowCardBase","description","intent","undefined","path","tags","thumbnail","iconImage","console","log","tagline","thumbnailComponent","thumbnailImg","getImageFromFileNode","Link","to","style","display","position","Box","height","left","top","width","zIndex","direction","alignItems","border","borderColor","padding","paddingLeft","transition","flexShrink","GatsbyImage","image","alt","flexWrap","map","tag","i","Chip","key","label"],"sourceRoot":""}