{"version":3,"file":"component---src-components-layouts-page-layout-tsx-content-file-path-content-design-system-task-flows-overview-mdx-685d536d7babb4aee9e7.js","mappings":"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","sources":["webpack://strudel/./content/design-system/task-flows/overview.mdx","webpack://strudel/./src/components/layouts/PageLayout.tsx","webpack://strudel/./src/components/Hero.tsx","webpack://strudel/./src/components/PageContainer.tsx","webpack://strudel/./src/components/PageHeader.tsx","webpack://strudel/./src/components/PageSection.tsx","webpack://strudel/./src/components/StyledMarkdown.tsx","webpack://strudel/./src/hooks/useTaskFlow.tsx","webpack://strudel/./src/components/TaskFlowCard.tsx","webpack://strudel/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Stack} from '@mui/material';\nimport {Hero} from '/src/components/Hero';\nimport {PageContainer} from '/src/components/PageContainer';\nimport {TaskFlowCard} from '/src/components/TaskFlowCard';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(Hero, null, React.createElement(_components.p, null, \"STRUDEL Design System is framed and guided by Task Flows, which are a set of steps (represented by a series of screens) that help to accomplish a task and represent how a user progresses through a UI.\")), \"\\n\", React.createElement(PageContainer, null, React.createElement(_components.h2, null, \"Browse the task flows\"), React.createElement(Stack, {\n    spacing: 2\n  }, React.createElement(TaskFlowCard, {\n    name: \"Comparison\",\n    showDescription: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Contributing Data\",\n    showDescription: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Exploring Datasets\",\n    showDescription: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Exploring Entities\",\n    showDescription: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Monitoring\",\n    showDescription: true\n  }), React.createElement(TaskFlowCard, {\n    name: \"Optimization\",\n    showDescription: true\n  }))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/strudel-web/strudel-web/content/design-system/task-flows/overview.mdx\";\nimport * as React from 'react';\nimport {Stack, Typography} from '@mui/material';\nimport BaseLayout from './BaseLayout';\nimport {PageHeader} from '../PageHeader';\nimport {StyledMarkdown} from '../StyledMarkdown';\nconst PageLayout = _ref => {\n  let {pageContext, children} = _ref;\n  console.log(pageContext);\n  return React.createElement(BaseLayout, {\n    hasSidebar: true\n  }, React.createElement(PageHeader, null, React.createElement(Stack, {\n    spacing: 2\n  }, React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    fontWeight: \"bold\"\n  }, pageContext.frontmatter.title), React.createElement(Typography, {\n    variant: \"h6\",\n    fontWeight: \"normal\"\n  }, pageContext.frontmatter.subtitle))), React.createElement(StyledMarkdown, null, children));\n};\nPageLayout\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageLayout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React, { PropsWithChildren } from 'react';\nimport { PageSection } from './PageSection';\nimport { Breakpoint } from '@mui/material';\n\ninterface HeroProps extends PropsWithChildren {\n  /** Optionally wrap the inner content in its own container and give it a max width. */\n  containerWidth?: false | Breakpoint | undefined;\n}\n\n/**\n * Full width purple page section for area towards the top of a page.\n */\nexport const Hero: React.FC<HeroProps> = ({\n  containerWidth = 'md',\n  children \n}) => {\n  return (\n    <PageSection\n      containerWidth={containerWidth}\n      sx={{\n        backgroundColor: 'info.main',\n        color: 'white',\n        fontSize: '1.15em',\n      }}\n    >\n      {children}\n    </PageSection>\n  );\n};","import * as React from 'react';\nimport { Container, ContainerProps } from '@mui/material';\nimport { StyledMarkdown } from './StyledMarkdown';\n\n/**\n * Common Container component to be used in page content areas and sections.\n * This helps ensure container width is consistent across different page sections.\n */\nexport const PageContainer: React.FC<ContainerProps> = ({ children, ...rest }) => {\n  return (\n    <Container\n      component=\"article\" \n      maxWidth=\"md\"\n      sx={{\n        paddingBottom: 4,\n        paddingTop: 4,\n      }}\n      {...rest}\n    >\n      <StyledMarkdown>\n        {children}  \n      </StyledMarkdown>\n    </Container>\n  )\n};","import React, { PropsWithChildren } from 'react';\nimport { PageSection } from './PageSection';\n\n/**\n * Full width light grey page section for the page title and headline.\n */\nexport const PageHeader: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <PageSection\n      containerWidth=\"md\"\n      sx={{\n        backgroundColor: 'neutral.main',\n        color: 'info.main'\n      }}\n    >\n      {children}\n    </PageSection>\n  );\n};","import * as React from 'react';\nimport { Box, Container, Breakpoint, BoxProps } from '@mui/material';\nimport { PageContainer } from './PageContainer';\n\ninterface PageSectionProps extends BoxProps {\n  /** Optionally wrap the inner content in its own container and give it a max width. */\n  containerWidth?: false | Breakpoint | undefined;\n  /** Optionally include red ribbon on the left or right side */\n  sideRibbon?: 'left' | 'right';\n}\n\n/**\n * Generic wrapper component for sections in a page.\n */\nexport const PageSection: React.FC<PageSectionProps> = ({\n  containerWidth,\n  sideRibbon,\n  children,\n  sx,\n  ...rest\n}) => {\n  return (\n    <Box\n      component=\"section\"\n      sx={{\n        paddingBottom: 4,\n        paddingTop: 4,\n        ...sx\n      }} \n      {...rest}\n    >\n      {sideRibbon && (\n        <Box\n          sx={{\n            backgroundColor: 'error.main',\n            height: '100%',\n            left: sideRibbon === 'left' ? 0 : 'auto',\n            position: 'absolute',\n            right: sideRibbon === 'right' ? 0 : 'auto',\n            top: 0,\n            width: '20px',\n          }}\n        />\n      )}\n      <PageContainer\n        component=\"div\"\n        maxWidth={containerWidth}\n        sx={{\n          paddingBottom: 0,\n          paddingTop: 0,\n        }}\n      >\n        {children} \n      </PageContainer>\n    </Box>\n  );\n};","import React, { PropsWithChildren } from 'react';\nimport { PageSection } from './PageSection';\nimport { Box } from '@mui/material';\n\n/**\n * Wrapper component for markdown content that will \n * apply styles to the inner html generated by the markdown.\n */\nexport const StyledMarkdown: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <Box\n      className=\"styled-markdown\"\n      sx={{\n        '& h1, & h2, & h3, & h4, & h5, & h6': {\n          marginBottom: 2,\n          marginTop: 2,\n        },\n        '& h2:not(:first-of-type)': {\n          borderTop: '2px dotted',\n          borderTopColor: 'error.light',\n          paddingTop: 2,\n        },\n        '& *:last-child': {\n          marginBottom: 0,\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n};","import { useStaticQuery, graphql } from \"gatsby\"\nimport { findPageByName } from \"../utils/utils\";\nimport { StrudelPage } from \"../types/strudel-config\";\n\ninterface TaskFlowsResult {\n  configJson: {\n    pages: StrudelPage[]\n  },\n  allMdx: {\n    nodes: {\n      frontmatter: {\n        id: string;\n        title: string;\n        tagline: string;\n        intent: string;\n      },\n      internal: {\n        contentFilePath: string;\n      }\n    }[]\n  }\n}\n\n/**\n * Get task flow metadata using the task flow's name in the config.\n * Combines fields from the task flow's object in strudel-config.json and \n * markdown frontmatter.\n */\nexport const useTaskFlow = (name: string) => {\n  const { configJson, allMdx } = useStaticQuery<TaskFlowsResult>(\n    graphql`\n      query {\n        configJson {\n          pages {\n            name\n            children {\n              name\n              children {\n                name\n                markdownId\n                path\n              }\n            }\n          }\n        }\n        allMdx {\n          nodes {\n            frontmatter {\n              id\n              title\n              tagline\n              intent\n            }\n          }\n        }\n      }\n    `\n  );\n  const taskFlowConfig = findPageByName(name, configJson.pages);\n  if (taskFlowConfig) {\n    const mdx = allMdx.nodes?.find((md) => md.frontmatter.id === taskFlowConfig.markdownId);\n    return {\n      ...taskFlowConfig,\n      ...mdx?.frontmatter\n    }\n  } else {\n    return;\n  }\n}","import React, { PropsWithChildren } from 'react';\nimport { Box, Stack, Typography } from '@mui/material';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { Link } from 'gatsby';\nimport { useTaskFlow } from '../hooks/useTaskFlow';\n\ninterface TaskFlowCardProps {\n  /** Name of a task flow as specified in strudel-config.json */\n  name: string;\n  /** Optionally display the full task flow description in the card */\n  showDescription?: boolean;\n}\n\n/**\n * Generate a Task Flow card by supplying the name of the task flow.\n * The tagline, title, description, image, and link will be generated \n * automatically based on the data in the task flow's markdown frontmatter.\n */\nexport const TaskFlowCard: React.FC<TaskFlowCardProps> = ({ \n  name,\n  showDescription = false\n}) => {\n  const taskFlow = useTaskFlow(name);\n\n  if (taskFlow) {\n    return (\n      <TaskFlowCardBase\n        title={taskFlow.name}\n        tagline={taskFlow?.tagline}\n        description={showDescription ? taskFlow.intent : undefined}\n        path={taskFlow?.path}\n      />\n    );\n  } else {\n    console.log(`No task flow found named \"${name}\"`)\n  }\n}\n\ninterface TaskFlowCardBaseProps {\n  title: string;\n  tagline?: string;\n  description?: string;\n  path?: string;\n}\n\n/**\n * Base component for the Task Flow cards.\n * Renders the given title, tagline, description, and image in a card view.\n */\nexport const TaskFlowCardBase: React.FC<TaskFlowCardBaseProps> = ({\n  title,\n  tagline,\n  description,\n  path = '#'\n}) => {\n  return (\n    <Link\n      to={path}\n      style={{\n        position: 'relative',\n      }}\n    >\n      <Box\n        sx={{\n          backgroundColor: 'error.main',\n          height: '100%',\n          left: 0,\n          position: 'absolute',\n          top: 0,\n          width: '8px',\n          zIndex: 2,\n        }}\n      />\n      <Stack\n        direction=\"row\"\n        spacing={4}\n        sx={{\n          alignItems: 'center',\n          border: '2px dotted',\n          borderColor: 'error.main',\n          padding: 1,\n          paddingLeft: 2,\n          transition: '0.25s',\n          '&:hover': {\n            backgroundColor: 'neutral.main'\n          }\n        }}\n      >\n        <Box\n          sx={{\n            flexShrink: 0\n          }}\n        >\n          <StaticImage\n            alt=\"STRUDEL team member photo\"\n            src=\"../../content/images/wallpaper.jpg\"\n            height={110}\n            width={110}\n          />\n        </Box>\n        <Stack>\n          <Typography \n            variant=\"h6\" \n            component=\"p\" \n            fontWeight=\"bold\"\n          >\n            {title}\n          </Typography>\n          <Typography>\n            {tagline}\n          </Typography>\n        </Stack>\n        {description && (\n          <Typography>\n            {description}\n          </Typography>\n        )}\n      </Stack>\n    </Link>\n  );\n};","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","_provideComponents","components","React","Hero","PageContainer","Stack","spacing","TaskFlowCard","name","showDescription","wrapper","MDXLayout","PageLayout","_ref","pageContext","children","console","log","BaseLayout","hasSidebar","PageHeader","Typography","component","variant","fontWeight","frontmatter","title","subtitle","StyledMarkdown","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","containerWidth","PageSection","sx","backgroundColor","color","fontSize","rest","Container","maxWidth","paddingBottom","paddingTop","sideRibbon","Box","height","left","position","right","top","width","className","marginBottom","marginTop","borderTop","borderTopColor","taskFlow","configJson","allMdx","useStaticQuery","taskFlowConfig","findPageByName","pages","mdx","nodes","_allMdx$nodes","find","md","id","markdownId","useTaskFlow","TaskFlowCardBase","tagline","description","intent","undefined","path","_ref2","Link","to","style","zIndex","direction","alignItems","border","borderColor","padding","paddingLeft","transition","flexShrink","StaticImage","alt","src","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}